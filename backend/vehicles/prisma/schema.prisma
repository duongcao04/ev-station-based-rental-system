generator client {
  provider = "prisma-client-js"
}

datasource db {
  // Change provider & url to match your setup (e.g. postgresql, mysql, sqlite)
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model SpecificationType {
  id          String  @id @default(uuid())
  label       String
  icon        String?
  description String?

  // Backref
  specifications CarSpecification[]
}

model Category {
  id           String  @id @default(uuid())
  displayName  String
  description  String
  thumbnailUrl String?

  // Many-to-many with Car (implicit join table)
  cars Car[]
}

model Brand {
  id           String  @id @default(uuid())
  displayName  String
  description  String
  thumbnailUrl String?

  // One-to-many to Car
  cars Car[]
}

model CarSpecification {
  id    String @id @default(uuid())
  value String

  // Relations
  carId String
  car   Car    @relation(fields: [carId], references: [id])

  specificationTypeId String
  specificationType   SpecificationType @relation(fields: [specificationTypeId], references: [id])

  // Prevent duplicate spec type per car
  @@unique([carId, specificationTypeId])
}

model Car {
  id String @id @default(uuid())

  regularPrice Decimal  @db.Decimal(10, 2)
  salePrice    Decimal? @db.Decimal(10, 2)
  depositPrice Decimal? @db.Decimal(10, 2)

  quantity  Int?
  isInStock Boolean

  description  String?
  thumbnailUrl String

  // Relations
  brandId String?
  brand   Brand?  @relation(fields: [brandId], references: [id])

  categories     Category[] // M:N implicit
  specifications CarSpecification[] // 1:N
  featuredImages CarImage[] // 1:N
}

model CarImage {
  id   String @id @default(uuid())
  url  String
  sort Int? // optional for ordering

  carId String
  car   Car    @relation(fields: [carId], references: [id])

  @@index([carId, sort])
}
